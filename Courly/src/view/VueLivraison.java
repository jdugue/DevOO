/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package view;

import java.awt.Cursor;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import model.Livraison;

/**
 *
 * @author tanguyhelesbeux
 */
public class VueLivraison extends VueLieu {
    
    private final int order;
    private final boolean shouldDisplayOrder;
    
    private static final String normalImagePath = "Images/pin_orange_40x55.png";
    private static final String highlightedImagePath = "Images/pin_orange_40x55_soft.png";
    private static final String selectedImagePath = "Images/pin_bleue_40x55.png";
    private static final String selectedHighlightedImagePath = "Images/pin_bleue_40x55_soft.png";
    private static final String errorImagePath = "Images/pin_rouge_40x55.png";
    private static final String errorHighlightedImagePath = "Images/pin_rouge_40x55_soft.png";
    
    private static final int width = 40;
    private static final int height = 55;
    
    private static final int xOrderLocation = 17;
    private static final int yOrderLocation = 27;

    /**
     * Creates new form VueLivraison
     * @param livraison
     * @param order
     * @param shouldDisplayOrder
     */
    public VueLivraison(Livraison livraison, int order, boolean shouldDisplayOrder) {
        initComponents();
        this.setOpaque(false);
        this.setSize(width, height);
        this.lieu = livraison;
        this.order = order;
        this.shouldDisplayOrder = shouldDisplayOrder;
    }
    
    public Livraison getLivraison() {
        return (Livraison)this.lieu;
    }

    /*
    @Override
    public void setHighlighted(boolean highlighted) {
        super.setHighlighted(highlighted);
        this.updateUI();
    }

    @Override
    public void setSelected(boolean selected) {
        super.setSelected(selected);
        this.updateUI();
    }
    */
    
    
    @Override
    protected BufferedImage pinImageForActualState() {
        boolean error = !((Livraison)this.lieu).estValide();
        
        if (error && this.highlighted) {
            return this.pinImage(errorHighlightedImagePath);
        } else if (error) {
            return this.pinImage(errorImagePath);
        } else if (this.selected && this.highlighted) {
            return this.pinImage(selectedHighlightedImagePath);
        } else if (this.selected) {
            return this.pinImage(selectedImagePath);
        } else if (this.highlighted) {
            return this.pinImage(highlightedImagePath);
        } else {
            return this.pinImage(normalImagePath);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>                        


    // Variables declaration - do not modify                     
    // End of variables declaration 
    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        if (this.shouldDisplayOrder) {
            int xLocation = (int) (xOrderLocation - 4*Math.round(Math.log10(this.order) - 0.5));
            g.drawString(""+this.order, xLocation, yOrderLocation); 
        }
    }
}
